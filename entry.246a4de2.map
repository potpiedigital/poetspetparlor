{"version":3,"sources":["../node_modules/instafeed.js/instafeed.js","entry.js"],"names":["userFeed","Instafeed","get","userId","clientId","accessToken","limit","resolution","run"],"mappings":"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","file":"entry.246a4de2.map","sourceRoot":"../source","sourcesContent":["// Generated by CoffeeScript 1.9.3\n(function() {\n  var Instafeed;\n\n  Instafeed = (function() {\n    function Instafeed(params, context) {\n      var option, value;\n      this.options = {\n        target: 'instafeed',\n        get: 'popular',\n        resolution: 'thumbnail',\n        sortBy: 'none',\n        links: true,\n        mock: false,\n        useHttp: false\n      };\n      if (typeof params === 'object') {\n        for (option in params) {\n          value = params[option];\n          this.options[option] = value;\n        }\n      }\n      this.context = context != null ? context : this;\n      this.unique = this._genKey();\n    }\n\n    Instafeed.prototype.hasNext = function() {\n      return typeof this.context.nextUrl === 'string' && this.context.nextUrl.length > 0;\n    };\n\n    Instafeed.prototype.next = function() {\n      if (!this.hasNext()) {\n        return false;\n      }\n      return this.run(this.context.nextUrl);\n    };\n\n    Instafeed.prototype.run = function(url) {\n      var header, instanceName, script;\n      if (typeof this.options.clientId !== 'string') {\n        if (typeof this.options.accessToken !== 'string') {\n          throw new Error(\"Missing clientId or accessToken.\");\n        }\n      }\n      if (typeof this.options.accessToken !== 'string') {\n        if (typeof this.options.clientId !== 'string') {\n          throw new Error(\"Missing clientId or accessToken.\");\n        }\n      }\n      if ((this.options.before != null) && typeof this.options.before === 'function') {\n        this.options.before.call(this);\n      }\n      if (typeof document !== \"undefined\" && document !== null) {\n        script = document.createElement('script');\n        script.id = 'instafeed-fetcher';\n        script.src = url || this._buildUrl();\n        header = document.getElementsByTagName('head');\n        header[0].appendChild(script);\n        instanceName = \"instafeedCache\" + this.unique;\n        window[instanceName] = new Instafeed(this.options, this);\n        window[instanceName].unique = this.unique;\n      }\n      return true;\n    };\n\n    Instafeed.prototype.parse = function(response) {\n      var anchor, childNodeCount, childNodeIndex, childNodesArr, e, eMsg, fragment, header, htmlString, httpProtocol, i, image, imageObj, imageString, imageUrl, images, img, imgHeight, imgOrient, imgUrl, imgWidth, instanceName, j, k, len, len1, len2, node, parsedLimit, reverse, sortSettings, targetEl, tmpEl;\n      if (typeof response !== 'object') {\n        if ((this.options.error != null) && typeof this.options.error === 'function') {\n          this.options.error.call(this, 'Invalid JSON data');\n          return false;\n        } else {\n          throw new Error('Invalid JSON response');\n        }\n      }\n      if (response.meta.code !== 200) {\n        if ((this.options.error != null) && typeof this.options.error === 'function') {\n          this.options.error.call(this, response.meta.error_message);\n          return false;\n        } else {\n          throw new Error(\"Error from Instagram: \" + response.meta.error_message);\n        }\n      }\n      if (response.data.length === 0) {\n        if ((this.options.error != null) && typeof this.options.error === 'function') {\n          this.options.error.call(this, 'No images were returned from Instagram');\n          return false;\n        } else {\n          throw new Error('No images were returned from Instagram');\n        }\n      }\n      if ((this.options.success != null) && typeof this.options.success === 'function') {\n        this.options.success.call(this, response);\n      }\n      this.context.nextUrl = '';\n      if (response.pagination != null) {\n        this.context.nextUrl = response.pagination.next_url;\n      }\n      if (this.options.sortBy !== 'none') {\n        if (this.options.sortBy === 'random') {\n          sortSettings = ['', 'random'];\n        } else {\n          sortSettings = this.options.sortBy.split('-');\n        }\n        reverse = sortSettings[0] === 'least' ? true : false;\n        switch (sortSettings[1]) {\n          case 'random':\n            response.data.sort(function() {\n              return 0.5 - Math.random();\n            });\n            break;\n          case 'recent':\n            response.data = this._sortBy(response.data, 'created_time', reverse);\n            break;\n          case 'liked':\n            response.data = this._sortBy(response.data, 'likes.count', reverse);\n            break;\n          case 'commented':\n            response.data = this._sortBy(response.data, 'comments.count', reverse);\n            break;\n          default:\n            throw new Error(\"Invalid option for sortBy: '\" + this.options.sortBy + \"'.\");\n        }\n      }\n      if ((typeof document !== \"undefined\" && document !== null) && this.options.mock === false) {\n        images = response.data;\n        parsedLimit = parseInt(this.options.limit, 10);\n        if ((this.options.limit != null) && images.length > parsedLimit) {\n          images = images.slice(0, parsedLimit);\n        }\n        fragment = document.createDocumentFragment();\n        if ((this.options.filter != null) && typeof this.options.filter === 'function') {\n          images = this._filter(images, this.options.filter);\n        }\n        if ((this.options.template != null) && typeof this.options.template === 'string') {\n          htmlString = '';\n          imageString = '';\n          imgUrl = '';\n          tmpEl = document.createElement('div');\n          for (i = 0, len = images.length; i < len; i++) {\n            image = images[i];\n            imageObj = image.images[this.options.resolution];\n            if (typeof imageObj !== 'object') {\n              eMsg = \"No image found for resolution: \" + this.options.resolution + \".\";\n              throw new Error(eMsg);\n            }\n            imgWidth = imageObj.width;\n            imgHeight = imageObj.height;\n            imgOrient = \"square\";\n            if (imgWidth > imgHeight) {\n              imgOrient = \"landscape\";\n            }\n            if (imgWidth < imgHeight) {\n              imgOrient = \"portrait\";\n            }\n            imageUrl = imageObj.url;\n            httpProtocol = window.location.protocol.indexOf(\"http\") >= 0;\n            if (httpProtocol && !this.options.useHttp) {\n              imageUrl = imageUrl.replace(/https?:\\/\\//, '//');\n            }\n            imageString = this._makeTemplate(this.options.template, {\n              model: image,\n              id: image.id,\n              link: image.link,\n              type: image.type,\n              image: imageUrl,\n              width: imgWidth,\n              height: imgHeight,\n              orientation: imgOrient,\n              caption: this._getObjectProperty(image, 'caption.text'),\n              likes: image.likes.count,\n              comments: image.comments.count,\n              location: this._getObjectProperty(image, 'location.name')\n            });\n            htmlString += imageString;\n          }\n          tmpEl.innerHTML = htmlString;\n          childNodesArr = [];\n          childNodeIndex = 0;\n          childNodeCount = tmpEl.childNodes.length;\n          while (childNodeIndex < childNodeCount) {\n            childNodesArr.push(tmpEl.childNodes[childNodeIndex]);\n            childNodeIndex += 1;\n          }\n          for (j = 0, len1 = childNodesArr.length; j < len1; j++) {\n            node = childNodesArr[j];\n            fragment.appendChild(node);\n          }\n        } else {\n          for (k = 0, len2 = images.length; k < len2; k++) {\n            image = images[k];\n            img = document.createElement('img');\n            imageObj = image.images[this.options.resolution];\n            if (typeof imageObj !== 'object') {\n              eMsg = \"No image found for resolution: \" + this.options.resolution + \".\";\n              throw new Error(eMsg);\n            }\n            imageUrl = imageObj.url;\n            httpProtocol = window.location.protocol.indexOf(\"http\") >= 0;\n            if (httpProtocol && !this.options.useHttp) {\n              imageUrl = imageUrl.replace(/https?:\\/\\//, '//');\n            }\n            img.src = imageUrl;\n            if (this.options.links === true) {\n              anchor = document.createElement('a');\n              anchor.href = image.link;\n              anchor.appendChild(img);\n              fragment.appendChild(anchor);\n            } else {\n              fragment.appendChild(img);\n            }\n          }\n        }\n        targetEl = this.options.target;\n        if (typeof targetEl === 'string') {\n          targetEl = document.getElementById(targetEl);\n        }\n        if (targetEl == null) {\n          eMsg = \"No element with id=\\\"\" + this.options.target + \"\\\" on page.\";\n          throw new Error(eMsg);\n        }\n        targetEl.appendChild(fragment);\n        header = document.getElementsByTagName('head')[0];\n        header.removeChild(document.getElementById('instafeed-fetcher'));\n        instanceName = \"instafeedCache\" + this.unique;\n        window[instanceName] = void 0;\n        try {\n          delete window[instanceName];\n        } catch (_error) {\n          e = _error;\n        }\n      }\n      if ((this.options.after != null) && typeof this.options.after === 'function') {\n        this.options.after.call(this);\n      }\n      return true;\n    };\n\n    Instafeed.prototype._buildUrl = function() {\n      var base, endpoint, final;\n      base = \"https://api.instagram.com/v1\";\n      switch (this.options.get) {\n        case \"popular\":\n          endpoint = \"media/popular\";\n          break;\n        case \"tagged\":\n          if (!this.options.tagName) {\n            throw new Error(\"No tag name specified. Use the 'tagName' option.\");\n          }\n          endpoint = \"tags/\" + this.options.tagName + \"/media/recent\";\n          break;\n        case \"location\":\n          if (!this.options.locationId) {\n            throw new Error(\"No location specified. Use the 'locationId' option.\");\n          }\n          endpoint = \"locations/\" + this.options.locationId + \"/media/recent\";\n          break;\n        case \"user\":\n          if (!this.options.userId) {\n            throw new Error(\"No user specified. Use the 'userId' option.\");\n          }\n          endpoint = \"users/\" + this.options.userId + \"/media/recent\";\n          break;\n        default:\n          throw new Error(\"Invalid option for get: '\" + this.options.get + \"'.\");\n      }\n      final = base + \"/\" + endpoint;\n      if (this.options.accessToken != null) {\n        final += \"?access_token=\" + this.options.accessToken;\n      } else {\n        final += \"?client_id=\" + this.options.clientId;\n      }\n      if (this.options.limit != null) {\n        final += \"&count=\" + this.options.limit;\n      }\n      final += \"&callback=instafeedCache\" + this.unique + \".parse\";\n      return final;\n    };\n\n    Instafeed.prototype._genKey = function() {\n      var S4;\n      S4 = function() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n      };\n      return \"\" + (S4()) + (S4()) + (S4()) + (S4());\n    };\n\n    Instafeed.prototype._makeTemplate = function(template, data) {\n      var output, pattern, ref, varName, varValue;\n      pattern = /(?:\\{{2})([\\w\\[\\]\\.]+)(?:\\}{2})/;\n      output = template;\n      while (pattern.test(output)) {\n        varName = output.match(pattern)[1];\n        varValue = (ref = this._getObjectProperty(data, varName)) != null ? ref : '';\n        output = output.replace(pattern, function() {\n          return \"\" + varValue;\n        });\n      }\n      return output;\n    };\n\n    Instafeed.prototype._getObjectProperty = function(object, property) {\n      var piece, pieces;\n      property = property.replace(/\\[(\\w+)\\]/g, '.$1');\n      pieces = property.split('.');\n      while (pieces.length) {\n        piece = pieces.shift();\n        if ((object != null) && piece in object) {\n          object = object[piece];\n        } else {\n          return null;\n        }\n      }\n      return object;\n    };\n\n    Instafeed.prototype._sortBy = function(data, property, reverse) {\n      var sorter;\n      sorter = function(a, b) {\n        var valueA, valueB;\n        valueA = this._getObjectProperty(a, property);\n        valueB = this._getObjectProperty(b, property);\n        if (reverse) {\n          if (valueA > valueB) {\n            return 1;\n          } else {\n            return -1;\n          }\n        }\n        if (valueA < valueB) {\n          return 1;\n        } else {\n          return -1;\n        }\n      };\n      data.sort(sorter.bind(this));\n      return data;\n    };\n\n    Instafeed.prototype._filter = function(images, filter) {\n      var filteredImages, fn, i, image, len;\n      filteredImages = [];\n      fn = function(image) {\n        if (filter(image)) {\n          return filteredImages.push(image);\n        }\n      };\n      for (i = 0, len = images.length; i < len; i++) {\n        image = images[i];\n        fn(image);\n      }\n      return filteredImages;\n    };\n\n    return Instafeed;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n      return module.exports = factory();\n    } else {\n      return root.Instafeed = factory();\n    }\n  })(this, function() {\n    return Instafeed;\n  });\n\n}).call(this);\n","import Instafeed from \"instafeed.js\";\n\nconst userFeed = new Instafeed({\n  get: \"user\",\n  userId: 2967027593,\n  clientId: \"c4a5c21651224cfdb2c58861bd08079c\",\n  accessToken: \"2967027593.1677ed0.d41b3027f7df439f99ec4b0ea2f037b5\",\n  limit: 6,\n  resolution: \"low_resolution\"\n});\n\nuserFeed.run();\n"]}